import os
from groq import Groq
from typing import Optional
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from datetime import datetime, timedelta, timezone
# --- 1. KH·ªûI T·∫†O V√Ä C·∫§U H√åNH ---
from sqlalchemy.orm import Session

import models
import database
# T·∫£i API key t·ª´ file .env
# Kh·ªüi t·∫°o client Groq
client = Groq(api_key=os.getenv("GROQ_API_KEY"))
    
# Ch·ªçn model c·ªßa Groq (llama3-8b l√† model nhanh nh·∫•t)
GROQ_MODEL = "qwen/qwen3-32b"

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng FastAPI
app = FastAPI()

def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()
        
    
# C·∫•u h√¨nh CORS (Cross-Origin Resource Sharing)
# R·∫§T QUAN TR·ªåNG: Cho ph√©p frontend (ch·∫°y tr√™n port kh√°c) g·ªçi ƒë∆∞·ª£c API n√†y
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Cho ph√©p t·∫•t c·∫£ c√°c ngu·ªìn g·ªëc (ƒë·ªÉ ph√°t tri·ªÉn)
    allow_credentials=True,
    allow_methods=["*"],  # Cho ph√©p t·∫•t c·∫£ c√°c ph∆∞∆°ng th·ª©c (POST, GET,...)
    allow_headers=["*"],  # Cho ph√©p t·∫•t c·∫£ c√°c header
)


# --- 2. ƒê·ªäNH NGHƒ®A C·∫§U TR√öC D·ªÆ LI·ªÜU (PYDANTIC MODEL) ---
# C·∫•u tr√∫c n√†y PH·∫¢I kh·ªõp v·ªõi d·ªØ li·ªáu m√† frontend g·ª≠i l√™n

class SurveyData(BaseModel):
    fullName: str
    anonymous: Optional[str] = None # Checkbox c√≥ th·ªÉ kh√¥ng g·ª≠i gi√° tr·ªã
    className: str
    gender: str
    q1: int
    q2: int
    q3: int
    q4: int
    q5: int
    q6: int
    q7: int
    q8: int
    openEnded: Optional[str] = ""



# --- 4. T·∫†O API ENDPOINT ---

@app.post("/submit-survey")
async def handle_survey(data: SurveyData, db: Session = Depends(get_db)):
    """
    Endpoint nh·∫≠n d·ªØ li·ªáu kh·∫£o s√°t, x·ª≠ l√Ω v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ AI.
    """
        # --- B∆Ø·ªöC 1: Chu·∫©n b·ªã d·ªØ li·ªáu ---
    is_anonymous_bool = data.anonymous == 'on'
    full_name = "·∫®n danh" if is_anonymous_bool else data.fullName

        # --- B∆Ø·ªöC 2: T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë·ªÉ l∆∞u ---
    db_response = models.SurveyResponse(
        fullName=full_name,
        is_anonymous=is_anonymous_bool,
        className=data.className,
        gender=data.gender,
        q1=data.q1, q2=data.q2, q3=data.q3, q4=data.q4,
        q5=data.q5, q6=data.q6, q7=data.q7, q8=data.q8,
        openEnded=data.openEnded
    )
        
    # --- B∆Ø·ªöC 3: G·ª≠i d·ªØ li·ªáu ƒë·∫øn Supabase ---
    db.add(db_response)  # Th√™m v√†o phi√™n l√†m vi·ªác
    db.commit()         # X√°c nh·∫≠n ƒë·ªÉ l∆∞u vƒ©nh vi·ªÖn
    db.refresh(db_response) # L√†m m·ªõi ƒë·ªÉ l·∫•y ID v·ª´a t·∫°o
        
    print(f"--- ‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Supabase v·ªõi ID: {db_response.id} ---")
    # In d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c ƒë·ªÉ ki·ªÉm tra (b·∫°n s·∫Ω th·∫•y trong terminal)
    print("--- Received Data ---")
    print(data.model_dump_json(indent=2))
    
    # --- Prompt Engineering: T·∫°o m·ªôt prompt th√¥ng minh cho Gemini ---
    # T·ªïng h·ª£p th√¥ng tin t·ª´ Likert scale ƒë·ªÉ cung c·∫•p ng·ªØ c·∫£nh cho AI
    context_summary = []
    if data.q1 == 1: context_summary.append("c·∫£m th·∫•y cƒÉng th·∫≥ng khi tham gia c√°c ti·∫øt h·ªçc tr√™n l·ªõp.")
    if data.q1 == 2: context_summary.append("c·∫£m th·∫•y bu·ªìn khi tham gia c√°c ti·∫øt h·ªçc tr√™n l·ªõp.")
    if data.q1 == 3: context_summary.append("c·∫£m th·∫•y b√¨nh th∆∞·ªùng khi tham gia c√°c ti·∫øt h·ªçc tr√™n l·ªõp.")
    if data.q1 == 4: context_summary.append("c·∫£m th·∫•y vui v·∫ª khi tham gia c√°c ti·∫øt h·ªçc tr√™n l·ªõp.")
    if data.q1 == 5: context_summary.append("c·∫£m th·∫•y h√†o h·ª©ng khi tham gia c√°c ti·∫øt h·ªçc tr√™n l·ªõp.")
        
    if data.q2 == 1: context_summary.append("c·∫£m th·∫•y cƒÉng th·∫≥ng khi ƒë·∫øn tr∆∞·ªùng.")
    if data.q2 == 2: context_summary.append("c·∫£m th·∫•y l·∫°c l√µng khi ƒë·∫øn tr∆∞·ªùng.")
    if data.q2 == 3: context_summary.append("c·∫£m th·∫•y b√¨nh th∆∞·ªùng khi ƒë·∫øn tr∆∞·ªùng.")
    if data.q2 == 4: context_summary.append("c·∫£m th·∫•y vui v·∫ª khi ƒë·∫øn tr∆∞·ªùng.")
    if data.q2 == 5: context_summary.append("c·∫£m th·∫•y h√†o h·ª©ng khi ƒë·∫øn tr∆∞·ªùng.")

    if data.q3 == 1: context_summary.append("c·∫£m th·∫•y S·ª£ h√£i khi ch·ª©ng ki·∫øn b·∫°o l·ª±c h·ªçc ƒë∆∞·ªùng.")
    if data.q3 == 2: context_summary.append("c·∫£m th·∫•y bu·ªìn khi ch·ª©ng ki·∫øn b·∫°o l·ª±c h·ªçc ƒë∆∞·ªùng.")
    if data.q3 == 3: context_summary.append("c·∫£m th·∫•y b√¨nh th∆∞·ªùng khi ch·ª©ng ki·∫øn b·∫°o l·ª±c h·ªçc ƒë∆∞·ªùng.")
    if data.q3 == 4: context_summary.append("c·∫£m th·∫•y vui v·∫ª khi ch·ª©ng ki·∫øn b·∫°o l·ª±c h·ªçc ƒë∆∞·ªùng.")
    if data.q3 == 5: context_summary.append("c·∫£m th·∫•y h·ª©ng th√∫ khi ch·ª©ng ki·∫øn b·∫°o l·ª±c h·ªçc ƒë∆∞·ªùng.")

    if data.q4 == 1: context_summary.append("c·∫£m th·∫•y CƒÉng th·∫≥ng khi giao ti·∫øp v·ªõi b·∫°n b√® trong l·ªõp.")
    if data.q4 == 2: context_summary.append("c·∫£m th·∫•y S·ª£ h√£i khi giao ti·∫øp v·ªõi b·∫°n b√® trong l·ªõp.")
    if data.q4 == 3: context_summary.append("c·∫£m th·∫•y b√¨nh th∆∞·ªùng khi giao ti·∫øp v·ªõi b·∫°n b√® trong l·ªõp.")
    if data.q4 == 4: context_summary.append("c·∫£m th·∫•y vui v·∫ª khi giao ti·∫øp v·ªõi b·∫°n b√® trong l·ªõp.")
    if data.q4 == 5: context_summary.append("c·∫£m th·∫•y H√†o h·ª©ng khi giao ti·∫øp v·ªõi b·∫°n b√® trong l·ªõp.")

    if data.q5 == 1: context_summary.append("c·∫£m th·∫•y Nh√†m ch√°n khi c√≥ ·ª©ng d·ª•ng ghi l·∫°i c·∫£m x√∫c h·∫±ng ng√†y.")
    if data.q5 == 2: context_summary.append("c·∫£m th·∫•y V√¥ d·ª•ng khi c√≥ ·ª©ng d·ª•ng ghi l·∫°i c·∫£m x√∫c h·∫±ng ng√†y.")
    if data.q5 == 3: context_summary.append("c·∫£m th·∫•y kh√¥ng quan t√¢m khi c√≥ ·ª©ng d·ª•ng ghi l·∫°i c·∫£m x√∫c h·∫±ng ng√†y.")
    if data.q5 == 4: context_summary.append("c·∫£m th·∫•y ph√π h·ª£p khi c√≥ ·ª©ng d·ª•ng ghi l·∫°i c·∫£m x√∫c h·∫±ng ng√†y.")
    if data.q5 == 5: context_summary.append("c·∫£m th·∫•y h√†o h·ª©ng khi c√≥ ·ª©ng d·ª•ng ghi l·∫°i c·∫£m x√∫c h·∫±ng ng√†y.")  

    if data.q6 == 1: context_summary.append("c·∫£m th·∫•y cƒÉng th·∫≥ng khi chia s·∫ª c·∫£m x√∫c c·ªßa m√¨nh ƒë·ªëi v·ªõi ng∆∞·ªùi kh√°c.")
    if data.q6 == 2: context_summary.append("c·∫£m th·∫•y Lo l·∫Øng khi chia s·∫ª c·∫£m x√∫c c·ªßa m√¨nh ƒë·ªëi v·ªõi ng∆∞·ªùi kh√°c.")
    if data.q6 == 3: context_summary.append("c·∫£m th·∫•y b√¨nh th∆∞·ªùng khi chia s·∫ª c·∫£m x√∫c c·ªßa m√¨nh ƒë·ªëi v·ªõi ng∆∞·ªùi kh√°c.")
    if data.q6 == 4: context_summary.append("c·∫£m th·∫•y An to√†n khi chia s·∫ª c·∫£m x√∫c c·ªßa m√¨nh ƒë·ªëi v·ªõi ng∆∞·ªùi kh√°c.")
    if data.q6 == 5: context_summary.append("c·∫£m th·∫•y Vui v·∫ª khi chia s·∫ª c·∫£m x√∫c c·ªßa m√¨nh ƒë·ªëi v·ªõi ng∆∞·ªùi kh√°c.")  

    if data.q7 == 1: context_summary.append("c·∫£m th·∫•y Ch√°n gh√©t v·ªõi b·∫£n th√¢n m√¨nh.")
    if data.q7 == 2: context_summary.append("c·∫£m th·∫•y Th·∫•t v·ªçng v·ªõi b·∫£n th√¢n m√¨nh.")
    if data.q7 == 3: context_summary.append("c·∫£m th·∫•y b√¨nh th∆∞·ªùng v·ªõi b·∫£n th√¢n m√¨nh.")
    if data.q7 == 4: context_summary.append("c·∫£m th·∫•y vui v·∫ª v·ªõi b·∫£n th√¢n m√¨nh.")
    if data.q7 == 5: context_summary.append("c·∫£m th·∫•y T·ª± h√†o v·ªõi b·∫£n th√¢n m√¨nh.")  

    if data.q2 == 1: context_summary.append("c·∫£m th·∫•y T·ª± ti kh·∫£ nƒÉng c·ªßa b·∫£n th√¢n..")
    if data.q2 == 2: context_summary.append("c·∫£m th·∫•y Th·∫•t v·ªçng kh·∫£ nƒÉng c·ªßa b·∫£n th√¢n..")
    if data.q2 == 3: context_summary.append("c·∫£m th·∫•y b√¨nh th∆∞·ªùng kh·∫£ nƒÉng c·ªßa b·∫£n th√¢n..")
    if data.q2 == 4: context_summary.append("c·∫£m th·∫•y H√†i l√≤ng kh·∫£ nƒÉng c·ªßa b·∫£n th√¢n..")
    if data.q2 == 5: context_summary.append("c·∫£m th·∫•y T·ª± tin kh·∫£ nƒÉng c·ªßa b·∫£n th√¢n..")  


    # T·∫°o prompt
    prompt = f"""
    B·∫°n l√† Emo, m·ªôt gi√°o vi√™n r·∫•t y√™u th∆∞∆°ng HS, m·ªôt chuy√™n gia t√¢m l√Ω h·ªçc ƒë∆∞·ªùng ·∫£o c·ªßa h·ªçc sinh THPT.
    L·∫Øng nghe v√† ƒë∆∞a ra l·ªùi khuy√™n nh·∫π nh√†ng, truy·ªÅn c·∫£m h·ª©ng cho ng√†y h√¥m sau. M·ªôt h·ªçc sinh v·ª´a chia s·∫ª c·∫£m x√∫c c·ªßa m√¨nh nh∆∞ sau:
    T√™n c·ªßa HS l√† {full_name}, gi·ªõi t√≠nh l√† {data.gender}.
    H√£y ph·∫£n h·ªìi theo c·∫•u tr√∫c ch·ªâ v·ªõi 3 ƒëo·∫°n tr·ª´ l·ªùi ch√†o sau:
    - L·ªùi ch√†o th√¢n m·∫≠t (g·ªçi t√™n h·ªçc sinh theo c√°ch d·ªÖ th∆∞∆°ng, g·∫ßn g≈©i, v√≠ d·ª• ‚ÄúCh√†o Minh n√® üíõ‚Äù).
    - ƒêo·∫°n t√¢m s·ª± ng·∫Øn g·ªçn th·ªÉ hi·ªán s·ª± th·∫•u hi·ªÉu v√† ƒë·ªìng c·∫£m v·ªõi t√¢m s·ª± c·ªßa h·ªçc sinh (d√πng ng√¥n ng·ªØ nh·∫π nh√†ng, kh√¥ng ph√°n x√©t).
    - ƒê∆∞a ra l·ªùi khuy√™n t√≠ch c·ª±c, ng·∫Øn g·ªçn ‚Äì gi√∫p h·ªçc sinh bi·∫øt n√™n l√†m g√¨ ƒë·ªÉ c√≥ m·ªôt ng√†y vui h∆°n ho·∫∑c nh·∫π l√≤ng h∆°n v√†o ng√†y h√¥m sau (g·ª£i √Ω h√†nh ƒë·ªông c·ª• th·ªÉ, nh∆∞ nghe nh·∫°c, vi·∫øt nh·∫≠t k√Ω, n√≥i chuy·ªán v·ªõi b·∫°n b√®, ƒëi d·∫°o, t·ª± th∆∞·ªüng m√≥n y√™u th√≠ch, v.v.).
    - K·∫øt th√∫c b·∫±ng m·ªôt th√¥ng ƒëi·ªáp ng·∫Øn g·ªçn kh√≠ch l·ªá (v√≠ d·ª•: ‚ÄúNg√†y mai ch·∫Øc ch·∫Øn s·∫Ω t·ªët h∆°n ƒë√≥ üåà‚Äù ho·∫∑c ‚ÄúB·∫°n ƒëang l√†m r·∫•t t·ªët r·ªìi, ƒë·ª´ng qu√™n m·ªâm c∆∞·ªùi nh√© üí™‚Äù).
    Gi·ªçng vƒÉn n√™n:
    - ·∫§m √°p, ch√¢n th√†nh, ph√π h·ª£p v·ªõi h·ªçc sinh THPT
    - Kh√¥ng ph√°n x√©t
    - Kh√¥ng d√πng t·ª´ chuy√™n m√¥n t√¢m l√Ω h·ªçc qu√° nhi·ªÅu
    - C√≥ th·ªÉ th√™m emoji nh·∫π nh√†ng ƒë·ªÉ tƒÉng c·∫£m x√∫c t√≠ch c·ª±c
    Ng·ªØ c·∫£nh t·ª´ c√¢u tr·∫£ l·ªùi H·ªçc sinh n√†y {', '.join(context_summary) if context_summary else "c√≥ c·∫£m x√∫c kh√° ·ªïn ƒë·ªãnh"}.
    Chia s·∫ª th√™m c·ªßa h·ªçc sinh: "{data.openEnded if data.openEnded else "H·ªçc sinh kh√¥ng chia s·∫ª g√¨ th√™m."}"
    """
    
    # TH√äM KH·ªêI N√ÄY V√ÄO
    try:
        # Groq s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng chat gi·ªëng OpenAI
        chat_completion = client.chat.completions.create(
            messages=[
                {
                    "role": "user",
                    "content": prompt, # Pro
                }
            ],
            model=GROQ_MODEL,
            temperature=0.7,
            max_completion_tokens=4096,
            top_p=1,
            reasoning_effort="default",
            stream=True,
            stop=None
        )
        
        feedback_text = chat_completion.choices[0].message.content
        
        if not feedback_text:
             feedback_text = "Emo ƒëang suy nghƒ© th√™m m·ªôt ch√∫t, b·∫°n h√£y th·ª≠ l·∫°i nh√©!"
        
        return {"feedback": feedback_text}
    
    except Exception as e:
        print(f"!!! Error calling Groq API: {e}")
        raise HTTPException(status_code=500, detail="C√≥ l·ªói x·∫£y ra khi t·∫°o ph·∫£n h·ªìi t·ª´ AI.")

# (Th√™m v√†o cu·ªëi file main.py)

from datetime import datetime, timedelta
from sqlalchemy import func

# --- PYDANTIC MODEL CHO D·ªÆ LI·ªÜU BI·ªÇU ƒê·ªí ---
# ƒê·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu m√† API s·∫Ω tr·∫£ v·ªÅ
class DailyEmotionData(BaseModel):
    date: str
    positive_avg: float
    negative_avg: float
    social_avg: float  # <--- TH√äM D√íNG N√ÄY
    self_esteem_avg: float

# --- API ENDPOINT M·ªöI CHO DASHBOARD ---
@app.get("/dashboard-data", response_model=list[DailyEmotionData])
async def get_dashboard_data(
    start_date: str | None = None,
    end_date: str | None = None,
    db: Session = Depends(get_db)
):
    """
    Endpoint n√†y truy v·∫•n CSDL, t·ªïng h·ª£p d·ªØ li·ªáu c·∫£m x√∫c trung b√¨nh theo ng√†y
    v√† tr·∫£ v·ªÅ cho frontend ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.
    """
    # 1. X·ª≠ l√Ω kho·∫£ng th·ªùi gian, s·ª≠ d·ª•ng m√∫i gi·ªù UTC
    if end_date:
        # Chuy·ªÉn ng√†y k·∫øt th√∫c th√†nh cu·ªëi ng√†y (23:59:59) ƒë·ªÉ bao g·ªìm t·∫•t c·∫£ d·ªØ li·ªáu trong ng√†y
        end = datetime.fromisoformat(end_date).replace(hour=23, minute=59, second=59, tzinfo=timezone.utc)
    else:
        end = datetime.now(timezone.utc) # L·∫•y gi·ªù hi·ªán t·∫°i theo UTC

    if start_date:
        start = datetime.fromisoformat(start_date).replace(tzinfo=timezone.utc)
    else:
        start = end - timedelta(days=30) # M·∫∑c ƒë·ªãnh l√† 30 ng√†y tr∆∞·ªõc

    # 2. Truy v·∫•n CSDL ƒë·ªÉ t√≠nh to√°n v√† nh√≥m d·ªØ li·ªáu
    query_result = (
        db.query(
            func.date(models.SurveyResponse.created_at).label("date"),
            func.avg((models.SurveyResponse.q1 + models.SurveyResponse.q2) / 2).label("positive_avg"),
            func.avg((models.SurveyResponse.q3 + models.SurveyResponse.q4) / 2).label("negative_avg"),
            func.avg((models.SurveyResponse.q5 + models.SurveyResponse.q6) / 2).label("social_avg"),
            func.avg((models.SurveyResponse.q7 + (6 - models.SurveyResponse.q8)) / 2).label("self_esteem_avg")
        )
        # ‚úÖ ƒê·∫£m b·∫£o vi·ªác l·ªçc c≈©ng di·ªÖn ra trong m√∫i gi·ªù ƒë√∫ng
        .filter(models.SurveyResponse.created_at.between(start, end))
        .group_by(func.date(models.SurveyResponse.created_at))
        .order_by(func.date(models.SurveyResponse.created_at).asc())
        .all()
    )

    # 3. ƒê·ªãnh d·∫°ng l·∫°i d·ªØ li·ªáu tr∆∞·ªõc khi tr·∫£ v·ªÅ
    return [
        DailyEmotionData(
            date=row.date.isoformat(),
            positive_avg=round(row.positive_avg, 2) if row.positive_avg else 0,
            negative_avg=round(row.negative_avg, 2) if row.negative_avg else 0,
            social_avg=round(row.social_avg, 2) if row.social_avg else 0,
            self_esteem_avg=round(row.self_esteem_avg, 2) if row.self_esteem_avg else 0
        ) for row in query_result

    ]












